name: Pet Shop CI/CD

on:
  #push:
  #  branches: [ "main" ]
  #pull_request:
  #  branches: [ "main" ]
  workflow_dispatch:

jobs:
  deploy-contracts:
    name: Deploy Contracts
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: |
          npm install
          npm install -g truffle

      - name: Run Truffle migrations
        run: |
          truffle compile
          truffle migrate --network live
          truffle test

      - name: Upload contract artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dapp-files
          path: |
            src/
            build/contracts/
          retention-days: 1

  build-and-push:
    name: Build and Push Docker image
    runs-on: ubuntu-latest
    needs: deploy-contracts

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download dapp files
        uses: actions/download-artifact@v4
        with:
          name: dapp-files
          path: .

      - name: Verify downloaded files
        run: |
          ls -la src/
          ls -la build/contracts/

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-1

      - name: Prepare ECR repository name based on the Github repository
        shell: bash
        run: |
          set -eux
          # lowercase the name
          repo="${GITHUB_REPOSITORY,,}"

          # replace / with _
          echo "ECR_REPO_NAME=${repo//\//_}" >> $GITHUB_ENV

      - name: Create ECR repository if it doesn't exist
        shell: bash
        run: |
          set -eux
          if ! aws ecr describe-repositories --repository-names "$ECR_REPO_NAME" > /dev/null 2>&1; then
            aws ecr create-repository --repository-name "$ECR_REPO_NAME"
            echo "ECR repository $ECR_REPO_NAME created."
          else
            echo "ECR repository $ECR_REPO_NAME already exists."
          fi

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Create tag based on the current timestamp
        id: tag-timestamp
        run: echo "IMAGE_TAG=$(date +'%Y-%m-%d-%H-%M')"

      - name: Build, tag, and push Docker image to Amazon ECR
        id: build-push
        shell: bash
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.ECR_REPO_NAME }}
          IMAGE_TAG: ${{ steps.tag-timestamp.outputs.timestamp }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "IMAGE $IMAGE_TAG is pushed to $ECR_REGISTRY/$ECR_REPOSITORY"
          echo "image_tag=$IMAGE_TAG"
          echo "full_image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

  update-helm-chart:
      name: Update Helm Chart
      runs-on: ubuntu-latest
      needs: build-and-push

      steps:
        - name: Checkout
          uses: actions/checkout@v4

        - name: Update image tag in values-tfg.yaml
          run: |
            cd chart
            sed -i "s|tag: .*|tag: ${{ needs.build-and-push.outputs.image_tag }}|g" values-tfg.yaml
            cat values.yaml

        - name: Commit and push changes
          run: |
            git config --global user.name 'GitHub Actions'
            git config --global user.email 'github-actions@github.com'
            git add chart/values-tfg.yaml
            git commit -m "chore: update image tag to ${{ needs.build-and-push.outputs.image_tag }}"
            git push