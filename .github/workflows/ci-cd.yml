name: Pet Shop CI/CD

on:
  #push:
  #  branches: [ "main" ]
  #pull_request:
  #  branches: [ "main" ]
  workflow_dispatch:
    inputs:
      network_url:
        description: 'Network URL for contract deployment'
        required: true
        type: string
        default: 'https://ganache.ajripa.click' # This services is deployed in our K8S cluster
      helm_chart_name:
        description: 'Helm chart name'
        required: true
        type: string
        default: 'tfg-truffle-pet-shop'
      force_argocd_sync:
        description: 'Force ArgoCD sync'
        required: true
        type: boolean
        default: true
jobs:
  deploy-contracts:
    name: Deploy Contracts
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: npm

      - name: Install dependencies
        run: |
          npm install
          npm install -g truffle

      - name: Run Truffle migrations
        run: |
          set -eux
          truffle compile
          truffle test --network live
          truffle migrate --network live
        env:
          NETWORK_URL: ${{ inputs.network_url }}

      - name: Upload contract artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dapp-files
          path: |
            src/
            build/contracts/
          retention-days: 1

      - name: Commit and push changes
        env:
          COMMIT_MESSAGE: "gitops: contracts updated"
          CHART_NAME: ${{ inputs.helm_chart_name }}
        run: |
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'github-actions@github.com'
          git fecth
          git pull
          git add build/contracts/
          git commit -m "$COMMIT_MESSAGE"
          git push

  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: deploy-contracts
    outputs:
      repo_name: ${{ steps.prepare-ecr.outputs.repo_name }}
      image_tag: ${{ steps.tag-timestamp.outputs.image_tag }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download dapp files
        uses: actions/download-artifact@v4
        with:
          name: dapp-files
          path: .

      - name: Verify downloaded files
        run: |
          ls -la src/
          ls -la build/contracts/

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-1

      - name: Prepare ECR repository name based on the Github repository
        id: prepare-ecr
        shell: bash
        run: |
          set -eux
          # remove the owner
          repo_name="${GITHUB_REPOSITORY#*/}"

          # convert to lowercase
          repo_name="${repo_name,,}"

          # replace / with _
          echo "repo_name=${repo_name//\//_}" >> $GITHUB_OUTPUT

      - name: Create tag based on the current timestamp
        id: tag-timestamp
        run: echo "image_tag=$(date +'%Y-%m-%d-%H-%M')" >> $GITHUB_OUTPUT

      - name: Create ECR repository if it doesn't exist
        shell: bash
        env:
          REPO_NAME: ${{ steps.prepare-ecr.outputs.repo_name }}
        run: |
          set -eux
          if ! aws ecr describe-repositories --repository-names "$REPO_NAME" > /dev/null 2>&1; then
            aws ecr create-repository --repository-name "$REPO_NAME"
            echo "ECR repository $REPO_NAME created."
          else
            echo "ECR repository $REPO_NAME already exists."
          fi

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Restore Docker layer cache
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-docker-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-docker-

      - name: Build, tag, and push Docker image to Amazon ECR
        id: build-push
        shell: bash
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ steps.tag-timestamp.outputs.image_tag }}
          REPO_NAME: ${{ steps.prepare-ecr.outputs.repo_name }}
          NETWORK_URL: ${{ inputs.network_url }}
        run: |
          docker buildx build \
            --cache-from=type=local,src=/tmp/.buildx-cache \
            --cache-to=type=local,dest=/tmp/.buildx-cache \
            -t $ECR_REGISTRY/$REPO_NAME:$IMAGE_TAG \
            . --build-arg NETWORK_URL=$NETWORK_URL \
            --push

  update-helm-chart:
      name: Update Helm Chart
      runs-on: ubuntu-latest
      needs: build-and-push
      permissions:
        contents: write

      steps:
        - name: Checkout
          uses: actions/checkout@v4

        - name: Configure AWS credentials
          uses: aws-actions/configure-aws-credentials@v2
          with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: eu-west-1

        - name: Login to Amazon ECR
          id: login-ecr
          uses: aws-actions/amazon-ecr-login@v2

        - name: Update values-tfg.yaml
          env:
            ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
            REPO_NAME: ${{ needs.build-and-push.outputs.repo_name }}
            IMAGE_TAG: ${{ needs.build-and-push.outputs.image_tag }}
            LIVE_URL: ${{ inputs.network_url }}
            CHART_NAME: ${{ inputs.helm_chart_name }}
          run: |
            cd chart/${CHART_NAME}
            # Update image repository
            sed -i "s|repository: .*|repository: $ECR_REGISTRY/$REPO_NAME|g" values-tfg.yaml
            # Update image tag
            sed -i "s|tag: .*|tag: $IMAGE_TAG|g" values-tfg.yaml
            # Update live url
            sed -i "s|liveUrl: .*|liveUrl: $LIVE_URL|g" values-tfg.yaml

            # Verify changes
            cat values-tfg.yaml

        - name: Commit and push changes
          env:
            COMMIT_MESSAGE: "gitops: image tag ${{ needs.build-and-push.outputs.image_tag }} and network url ${{ inputs.network_url }}"
            CHART_NAME: ${{ inputs.helm_chart_name }}
          run: |
            git config --global user.name 'GitHub Actions'
            git config --global user.email 'github-actions@github.com'
            git add chart/$CHART_NAME/values-tfg.yaml
            git fecth
            git pull
            git commit -m "$COMMIT_MESSAGE"
            git push

  sync-argocd:
    name: Sync ArgoCD Application
    needs: update-helm-chart
    runs-on: ubuntu-latest
    if: inputs.force_argocd_sync == true

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-1

      - name: Get ArgoCD credentials from AWS Secrets Manager
        id: get-token
        run: |
          SECRET_VALUE=$(aws secretsmanager get-secret-value --secret-id argocd/credentials --query 'SecretString' --output text)
          ARGOCD_TOKEN=$(echo $SECRET_VALUE | jq -r .token)
          ARGOCD_SERVER=$(echo $SECRET_VALUE | jq -r .hostname)
          echo "argocd_token=$ARGOCD_TOKEN" >> $GITHUB_OUTPUT
          echo "argocd_server=$ARGOCD_SERVER" >> $GITHUB_OUTPUT

      - name: Install ArgoCD CLI
        run: |
          set -eux
          curl -sSL -o argocd-linux-amd64 https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
          sudo install -m 555 argocd-linux-amd64 /usr/local/bin/argocd
          rm argocd-linux-amd64
          argocd version --client

      - name: Sync ArgoCD application
        env:
          ARGOCD_TOKEN: ${{ steps.get-token.outputs.argocd_token }}
          ARGOCD_SERVER: ${{ steps.get-token.outputs.argocd_server }}
          CHART_NAME: ${{ inputs.helm_chart_name }}
        run: |
          set -eux
          # Sync app
            argocd app get --refresh $CHART_NAME --auth-token $ARGOCD_TOKEN --server $ARGOCD_SERVER --grpc-web

          # Wait for app
          argocd app wait $CHART_NAME --sync --health --auth-token $ARGOCD_TOKEN --server $ARGOCD_SERVER --grpc-web



